{%- if settings.content_boundary_style == 'sawtooth-1' -%}
  {%- liquid
    assign content_boundary_size = settings.content_boundary_scale | times: 2 | plus: 2
    assign content_boundary_style_overlap = content_boundary_size
    assign content_boundary_size_padding_multiplier = 0.75
  -%}

  .content-boundary:is(.content-boundary--top, .content-boundary--top-flipped) {
    mask-image:
      url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 12.5'><path d='M 0 10 L 10 0, 20 10, 20 15, 0 15 z' fill='black' /></svg>"),
      linear-gradient(
        to bottom,
        transparent calc({{ content_boundary_size }}px * var(--content-boundary-scale)),
        #000 calc({{ content_boundary_size }}px * var(--content-boundary-scale)),
        #000 100%);
    mask-position: 0px 0px, top;
    mask-size:
      calc(var(--content-boundary-scale) * {{ content_boundary_size }}px * 2),
      auto;
    mask-repeat: repeat-x;
  }

  .content-boundary.content-boundary--top-flipped {
    mask-position: calc(var(--content-boundary-scale) * -{{ content_boundary_size }}px) 0px, top;
  }

  .content-boundary.content-boundary--bottom {
    mask-image:
      linear-gradient(
        to bottom,
        #000 0%,
        #000 calc(100% + 0.5px - {{ content_boundary_size }}px * var(--content-boundary-scale) * 1.2),
        transparent calc(100% + 0.5px - {{ content_boundary_size }}px * var(--content-boundary-scale) * 1.2),
        transparent 100%),
      url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 -2.5 20 14' fill='transparent'><path d='M 0 0 L 10 10, 20 0, 20 -5, 0 -5 z' fill='black' /></svg>");
    mask-position: left calc(100% + 0.5px), left calc(100% + 0.5px);
    mask-size:
      auto,
      calc(var(--content-boundary-scale) * {{ content_boundary_size }}px * 2);
    mask-repeat: repeat-x;
  }

{%- elsif settings.content_boundary_style == 'sawtooth-2' -%}
  {%- liquid
    assign content_boundary_size = settings.content_boundary_scale | times: 2 | plus: 2
    assign svg_height = content_boundary_size | times: 0.5
    assign content_boundary_style_overlap = svg_height
    assign content_boundary_size_padding_multiplier = 0.75
  -%}

  .content-boundary:is(.content-boundary--top, .content-boundary--top-flipped) {
    mask-image:
      url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 7'><path d='M 0 5 L 10 0, 20 5, 20 10, 0 10 z' fill='black' /></svg>"),
      linear-gradient(
        to bottom,
        transparent calc({{ svg_height }}px * var(--content-boundary-scale)),
        #000 calc({{ svg_height }}px * var(--content-boundary-scale)),
        #000 100%);
    mask-position: 0px 0px, top;
    mask-size:
      calc(var(--content-boundary-scale) * {{ content_boundary_size }}px * 2),
      auto;
    mask-repeat: repeat-x;
  }

  .content-boundary.content-boundary--top-flipped {
    mask-position: calc(var(--content-boundary-scale) * -{{ content_boundary_size }}px) 0px, top;
  }

  .content-boundary.content-boundary--bottom {
    mask-image:
      linear-gradient(
        to bottom,
        #000 0%,
        #000 calc(100% + 0.5px - {{ svg_height }}px * var(--content-boundary-scale) * 1.25),
        transparent calc(100% + 0.5px - {{ svg_height }}px * var(--content-boundary-scale) * 1.25),
        transparent 100%),
      url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 -4 20 10'><path d='M 0 0 L 10 5, 20 0, 20 -5, 0 -5 z' fill='black' /></svg>");
    mask-position: left calc(100% + 0.5px), left calc(100% + 0.5px);
    mask-size:
      auto,
      calc(var(--content-boundary-scale) * {{ content_boundary_size }}px * 2);
    mask-repeat: repeat-x;
  }

{%- elsif settings.content_boundary_style == 'slant' -%}
  {%- liquid
    assign content_boundary_size = settings.content_boundary_scale | times: 5 | plus: 10
    assign content_boundary_style_overlap = content_boundary_size
    assign content_boundary_size_padding_multiplier = 0.75
  -%}

  .content-boundary.content-boundary--top {
    mask-image:
      url("data:image/svg+xml;utf8,<svg viewBox='0 0 20 21' preserveAspectRatio='none' xmlns='http://www.w3.org/2000/svg'><path d='M 0 0 L 20 20, 20 21, 0 21 Z' fill='black'/></svg>"),
      linear-gradient(
        to bottom,
        transparent 0%,
        transparent calc(calc({{ content_boundary_size }}px * var(--content-boundary-scale))),
        #000 calc({{ content_boundary_size }}px * var(--content-boundary-scale)),
        #000 100%);
    mask-position: left top, top;
    mask-size:
      100% calc({{ content_boundary_size }}px * var(--content-boundary-scale) * 1.05),
      auto;
    mask-repeat: no-repeat;
  }

  .content-boundary.content-boundary--top-flipped {
    mask-image:
      url("data:image/svg+xml;utf8,<svg viewBox='0 0 20 21' preserveAspectRatio='none' xmlns='http://www.w3.org/2000/svg'><path d='M 20 0 L 0 20, 0 21, 20 21 Z' fill='black'/></svg>"),
      linear-gradient(
        to bottom,
        transparent 0%,
        transparent calc(calc({{ content_boundary_size }}px * var(--content-boundary-scale))),
        #000 calc({{ content_boundary_size }}px * var(--content-boundary-scale)),
        #000 100%);
    mask-position: left top, top;
    mask-size:
      100% calc({{ content_boundary_size }}px * var(--content-boundary-scale) * 1.05),
      auto;
    mask-repeat: no-repeat;
  }

  .content-boundary.content-boundary--bottom {
    mask-image:
      url("data:image/svg+xml;utf8,<svg viewBox='0 0 20 21' preserveAspectRatio='none' xmlns='http://www.w3.org/2000/svg'><path d='M 0 0 L 20 0, 20 1, 0 21 Z' fill='black'/></svg>"),
      linear-gradient(
        to bottom,
        #000 0%,
        #000 calc(100% - {{ content_boundary_size }}px * var(--content-boundary-scale)),
        transparent calc(100% - {{ content_boundary_size }}px * var(--content-boundary-scale)),
        transparent 100%);
    mask-position: left 100%, top;
    mask-size:
      100% calc({{ content_boundary_size }}px * var(--content-boundary-scale) * 1.05),
      auto;
    mask-repeat: no-repeat;
  }

{%- elsif settings.content_boundary_style == 'wave-tile' -%}
  {%- liquid
    assign content_boundary_size = settings.content_boundary_scale | times: 5 | plus: 10
    assign content_boundary_height = content_boundary_size | times: 0.5
    assign content_boundary_style_overlap = content_boundary_height
    assign content_boundary_size_padding_multiplier = 0.75
  -%}

  .content-boundary:is(.content-boundary--top, .content-boundary--top-flipped) {
    mask-image:
      url("data:image/svg+xml;utf8,<svg width='40' height='20' viewBox='0 0 40 20' xmlns='http://www.w3.org/2000/svg'><path d='M -10 10 C -5 20, 5 20, 10 10 S 25 0, 30 10 S 45 20, 50 10 L 50 25, -10 25 Z' fill='black' stroke='none'/></svg>"),
      linear-gradient(
        to bottom,
        transparent calc({{ content_boundary_height }}px * var(--content-boundary-scale)),
        #000 calc({{ content_boundary_height }}px * var(--content-boundary-scale)),
        #000 100%);
    mask-position: 0px 0px, top;
    mask-size:
      calc({{ content_boundary_size }}px * var(--content-boundary-scale) * 1.1),
      auto;
    mask-repeat: repeat-x;
  }

  .content-boundary.content-boundary--top-flipped {
    mask-position: calc(var(--content-boundary-scale) * -{{ content_boundary_size }}px) 0px, top;
  }

  .content-boundary.content-boundary--bottom {
    mask-image:
      url("data:image/svg+xml;utf8,<svg width='40' height='20' viewBox='0 0 40 20' xmlns='http://www.w3.org/2000/svg'><path d='M -10 10 C -5 0, 5 0, 10 10 S 25 20, 30 10 S 45 0, 50 10 L 50 -5, -10 -5 Z' fill='black' stroke='none'/></svg>"),
      linear-gradient(
        to bottom,
        #000 0%,
        #000 calc(100% + 0.5px - {{ content_boundary_height }}px * var(--content-boundary-scale)),
        transparent calc(100% + 0.5px - {{ content_boundary_height }}px * var(--content-boundary-scale)),
        transparent 100%);
    mask-position: left calc(100% + 0.5px), left calc(100% + 0.5px);
    mask-size:
      calc({{ content_boundary_size }}px * var(--content-boundary-scale) * 1.1),
      auto;
    mask-repeat: repeat-x;
  }

{%- elsif settings.content_boundary_style == 'wave-wide' -%}
  {%- liquid
    assign content_boundary_size = settings.content_boundary_scale | times: 5 | plus: 10
    assign content_boundary_style_overlap = content_boundary_size
    assign content_boundary_size_padding_multiplier = 0.75
  -%}

  .content-boundary.content-boundary--top {
    mask-image:
      url("data:image/svg+xml;utf8,<svg viewBox='36 6 50 15' preserveAspectRatio='none' xmlns='http://www.w3.org/2000/svg'><path d='M 0,12.5 C 12.5,12.5 12.5,6.25 25,6.25 S 37.5,18.75 50,18.75 62.5,6.25 75,6.25 87.5,18.75 100,18.75 L 100 40, 0 40 Z' fill='black' stroke='none'/></svg>"),
      linear-gradient(
        to bottom,
        transparent 0%,
        transparent calc({{ content_boundary_size }}px * var(--content-boundary-scale)),
        #000 calc({{ content_boundary_size }}px * var(--content-boundary-scale)),
        #000 100%);
    mask-position: 0px 0px, top;
    mask-size:
      100% calc({{ content_boundary_size }}px * var(--content-boundary-scale) * 1.05),
      auto;
    mask-repeat: no-repeat;
  }

  .content-boundary.content-boundary--top-flipped {
    mask-image:
      url("data:image/svg+xml;utf8,<svg viewBox='12 6 50 15' preserveAspectRatio='none' xmlns='http://www.w3.org/2000/svg'><path d='M 0,12.5 C 12.5,12.5 12.5,6.25 25,6.25 S 37.5,18.75 50,18.75 62.5,6.25 75,6.25 87.5,18.75 100,18.75 L 100 40, 0 40 Z' fill='black' stroke='none'/></svg>"),
      linear-gradient(
        to bottom,
        transparent 0%,
        transparent calc({{ content_boundary_size }}px * var(--content-boundary-scale)),
        #000 calc({{ content_boundary_size }}px * var(--content-boundary-scale)),
        #000 100%);
    mask-position: 0px 0px, top;
    mask-size:
      100% calc({{ content_boundary_size }}px * var(--content-boundary-scale) * 1.05),
      auto;
    mask-repeat: no-repeat;
  }

  .content-boundary.content-boundary--bottom {
    mask-image:
      url("data:image/svg+xml;utf8,<svg viewBox='40 4 50 15' preserveAspectRatio='none' xmlns='http://www.w3.org/2000/svg'><path d='M 0,12.5 C 12.5,12.5 12.5,6.25 25,6.25 S 37.5,18.75 50,18.75 62.5,6.25 75,6.25 87.5,18.75 100,18.75 L 100 0, 0 0 Z' fill='black' stroke='none'/></svg>"),
      linear-gradient(
        to bottom,
        #000 0%,
        #000 calc(100% - {{ content_boundary_size }}px * var(--content-boundary-scale)),
        transparent calc(100% - {{ content_boundary_size }}px * var(--content-boundary-scale)),
        transparent 100%);
    mask-position: left 100%, top;
    mask-size:
      100% calc({{ content_boundary_size }}px * var(--content-boundary-scale) * 1.05),
      auto;
    mask-repeat: no-repeat;
  }

{%- elsif settings.content_boundary_style == 'arc' -%}
  {%- liquid
    assign content_boundary_size = settings.content_boundary_scale | times: 6 | plus: 4
    assign content_boundary_style_overlap = content_boundary_size
    assign content_boundary_size_padding_multiplier = 0.75
  -%}

  .content-boundary.content-boundary--top {
    mask-image:
      url("data:image/svg+xml;utf8,<svg viewBox='0 0 100 25' preserveAspectRatio='none' xmlns='http://www.w3.org/2000/svg'><path d='M 0,0 C 20,20 80,20 100,0 L 100,25 0,25 z' fill='black' stroke='none'/></svg>"),
      linear-gradient(
        to bottom,
        transparent 0%,
        transparent calc(calc({{ content_boundary_size }}px * var(--content-boundary-scale))),
        #000 calc({{ content_boundary_size }}px * var(--content-boundary-scale)),
        #000 100%);
    mask-position: center top, top;
    mask-size:
      100% calc({{ content_boundary_size }}px * var(--content-boundary-scale) * 1.1),
      auto;
    mask-repeat: no-repeat;
  }

  .content-boundary.content-boundary--top-flipped {
    mask-image:
    url("data:image/svg+xml;utf8,<svg viewBox='0 0 100 25' preserveAspectRatio='none' xmlns='http://www.w3.org/2000/svg'><path d='M 0,20 C 20,0 80,0 100,20 L 100,25 0,25 z' fill='black' stroke='none'/></svg>"),
      linear-gradient(
        to bottom,
        transparent 0%,
        transparent calc(calc({{ content_boundary_size }}px * var(--content-boundary-scale))),
        #000 calc({{ content_boundary_size }}px * var(--content-boundary-scale)),
        #000 100%);
    mask-position: center top, top;
    mask-size:
      100% calc({{ content_boundary_size }}px * var(--content-boundary-scale) * 1.1),
      auto;
    mask-repeat: no-repeat;
  }

  .content-boundary.content-boundary--bottom {
    mask-image:
      url("data:image/svg+xml;utf8,<svg viewBox='0 -5 100 26' preserveAspectRatio='none' xmlns='http://www.w3.org/2000/svg'><path d='M 0,0 C 20,20 80,20 100,0 L 100,-10 0,-10 z' fill='black' stroke='none'/></svg>"),
      linear-gradient(
        to bottom,
        #000 0%,
        #000 calc(100% - calc({{ content_boundary_size }}px * var(--content-boundary-scale))),
        transparent calc({{ content_boundary_size }}px * var(--content-boundary-scale)),
        transparent 100%);
    mask-position: center calc(100% + 0.5px), top;
    mask-size:
      100% calc({{ content_boundary_size }}px * var(--content-boundary-scale) * 1.1),
      auto;
    mask-repeat: no-repeat;
  }

{%- elsif settings.content_boundary_style == 'angled-edge' -%}
  {%- liquid
    assign content_boundary_size = settings.content_boundary_scale | times: 5 | plus: 4
    assign content_boundary_style_overlap = content_boundary_size
    assign content_boundary_size_padding_multiplier = 0
    assign content_boundary_size_padding_multiplier_flipped = 1
  -%}

  .content-boundary.content-boundary--top {
    mask-image:
      url("data:image/svg+xml;utf8,<svg viewBox='0 0 20 20' preserveAspectRatio='none' xmlns='http://www.w3.org/2000/svg'><polygon points='21,-3 21,21 -3,21' fill='black'/></svg>"),
      url("data:image/svg+xml;utf8,<svg viewBox='0 0 20 20' preserveAspectRatio='none' xmlns='http://www.w3.org/2000/svg'><polygon points='-1,-3 23,21 -1,21' fill='black'/></svg>"),
      url("data:image/svg+xml;utf8,<svg viewBox='0 0 20 20' preserveAspectRatio='none' xmlns='http://www.w3.org/2000/svg'><path d='M 0 0 H 20 V 20 H 0 Z' fill='black'/></svg>"),
      linear-gradient(
        to bottom,
        transparent 0%,
        transparent calc(calc({{ content_boundary_size }}px * var(--content-boundary-scale))),
        #000 calc({{ content_boundary_size }}px * var(--content-boundary-scale)),
        #000 100%);
    mask-position: left top, right top, center top, top;
    mask-size:
      calc({{ content_boundary_size }}px * var(--content-boundary-scale) * 1.05) calc({{ content_boundary_size }}px * var(--content-boundary-scale) * 1.05),
      calc({{ content_boundary_size }}px * var(--content-boundary-scale) * 1.05) calc({{ content_boundary_size }}px * var(--content-boundary-scale) * 1.05),
      calc(100% - {{ content_boundary_size }}px * var(--content-boundary-scale) * 2) calc({{ content_boundary_size }}px * var(--content-boundary-scale) * 3),
      auto;
    mask-repeat: no-repeat;
  }

  .content-boundary.content-boundary--top-flipped {
    mask-image:
      url("data:image/svg+xml;utf8,<svg viewBox='0 0 20 20' preserveAspectRatio='none' xmlns='http://www.w3.org/2000/svg'><polygon points='0,0 20,20 0,20' fill='black'/></svg>"),
      url("data:image/svg+xml;utf8,<svg viewBox='0 0 20 20' preserveAspectRatio='none' xmlns='http://www.w3.org/2000/svg'><polygon points='20,0 20,20 0,20' fill='black'/></svg>"),
      linear-gradient(
        to bottom,
        transparent 0%,
        transparent calc(calc({{ content_boundary_size }}px * var(--content-boundary-scale))),
        #000 calc({{ content_boundary_size }}px * var(--content-boundary-scale)),
        #000 100%);
    mask-position:
      left top,
      right top,
      top;
    mask-size:
      calc({{ content_boundary_size }}px * var(--content-boundary-scale) * 1.1) calc({{ content_boundary_size }}px * var(--content-boundary-scale) * 1.1),
      calc({{ content_boundary_size }}px * var(--content-boundary-scale) * 1.1) calc({{ content_boundary_size }}px * var(--content-boundary-scale) * 1.1),
      auto;
    mask-repeat: no-repeat;
  }

  .content-boundary.content-boundary--bottom {
    mask-image:
      url("data:image/svg+xml;utf8,<svg viewBox='0 0 20 20' preserveAspectRatio='none' xmlns='http://www.w3.org/2000/svg'><polygon points='-2,-1 21,-1 21,22' fill='black'/></svg>"),
      url("data:image/svg+xml;utf8,<svg viewBox='0 0 20 20' preserveAspectRatio='none' xmlns='http://www.w3.org/2000/svg'><polygon points='-1,-1 22,-1 -1,22' fill='black'/></svg>"),
      url("data:image/svg+xml;utf8,<svg viewBox='0 0 20 20' preserveAspectRatio='none' xmlns='http://www.w3.org/2000/svg'><path d='M 0 0 H 20 V 20 H 0 Z' fill='black'/></svg>"),
      linear-gradient(
        to bottom,
        #000 0%,
        #000 calc(100% - calc({{ content_boundary_size }}px * var(--content-boundary-scale))),
        transparent calc({{ content_boundary_size }}px * var(--content-boundary-scale)),
        transparent 100%);
    mask-position: left bottom, right bottom, center bottom, top;
    mask-size:
      calc({{ content_boundary_size }}px * var(--content-boundary-scale) * 1.05) calc({{ content_boundary_size }}px * var(--content-boundary-scale) * 1.05),
      calc({{ content_boundary_size }}px * var(--content-boundary-scale) * 1.05) calc({{ content_boundary_size }}px * var(--content-boundary-scale) * 1.05),
      calc(100% - {{ content_boundary_size }}px * var(--content-boundary-scale) * 2) calc({{ content_boundary_size }}px * var(--content-boundary-scale) * 3),
      auto;
    mask-repeat: no-repeat;
  }

{%- elsif settings.content_boundary_style == 'curved-edge' -%}
  {%- liquid
    assign content_boundary_size = settings.content_boundary_scale | times: 5 | plus: 4
    assign content_boundary_style_overlap = content_boundary_size
    assign content_boundary_size_padding_multiplier = 0
    assign content_boundary_size_padding_multiplier_flipped = 1
  -%}

  .content-boundary.content-boundary--top {
    mask-image:
      url("data:image/svg+xml;utf8,<svg viewBox='0 0 20 20' preserveAspectRatio='none' xmlns='http://www.w3.org/2000/svg'><circle cx='10' cy='10' r='10' fill='black'/></svg>"),
      url("data:image/svg+xml;utf8,<svg viewBox='0 0 20 20' preserveAspectRatio='none' xmlns='http://www.w3.org/2000/svg'><circle cx='10' cy='10' r='10' fill='black'/></svg>"),
      url("data:image/svg+xml;utf8,<svg viewBox='0 0 20 20' preserveAspectRatio='none' xmlns='http://www.w3.org/2000/svg'><path d='M 0 0 H 20 V 20 H 0 Z' fill='black'/></svg>"),
      linear-gradient(
        to bottom,
        transparent 0%,
        transparent calc(calc({{ content_boundary_size }}px * var(--content-boundary-scale))),
        #000 calc({{ content_boundary_size }}px * var(--content-boundary-scale)),
        #000 100%);
    mask-position: left top, right top, center top, top;
    mask-size:
      calc({{ content_boundary_size }}px * var(--content-boundary-scale) * 2) calc({{ content_boundary_size }}px * var(--content-boundary-scale) * 2),
      calc({{ content_boundary_size }}px * var(--content-boundary-scale) * 2) calc({{ content_boundary_size }}px * var(--content-boundary-scale) * 2),
      calc(100% - {{ content_boundary_size }}px * var(--content-boundary-scale) * 2) calc({{ content_boundary_size }}px * var(--content-boundary-scale) * 3),
      auto;
    mask-repeat: no-repeat;
  }

  .content-boundary.content-boundary--top-flipped {
    mask-image:
      url("data:image/svg+xml;utf8,<svg viewBox='0 0 20 20' preserveAspectRatio='none' xmlns='http://www.w3.org/2000/svg'><path d='M 0 0 Q 0 20 20 20 L 0 20 Z' fill='black'/></svg>"),
      url("data:image/svg+xml;utf8,<svg viewBox='0 0 20 20' preserveAspectRatio='none' xmlns='http://www.w3.org/2000/svg'><path d='M 20 0 Q 20 20 0 20 L 20 20 Z' fill='black'/></svg>"),
      linear-gradient(
        to bottom,
        transparent 0%,
        transparent calc(calc({{ content_boundary_size }}px * var(--content-boundary-scale))),
        #000 calc({{ content_boundary_size }}px * var(--content-boundary-scale)),
        #000 100%);
    mask-position:
      left top,
      right top,
      top;
    mask-size:
      calc({{ content_boundary_size }}px * var(--content-boundary-scale)) calc({{ content_boundary_size }}px * var(--content-boundary-scale)),
      calc({{ content_boundary_size }}px * var(--content-boundary-scale)) calc({{ content_boundary_size }}px * var(--content-boundary-scale)),
      auto;
    mask-repeat: no-repeat;
  }

  .content-boundary.content-boundary--bottom {
    mask-image:
      url("data:image/svg+xml;utf8,<svg viewBox='0 0 20 20' preserveAspectRatio='none' xmlns='http://www.w3.org/2000/svg'><circle cx='10' cy='10' r='10' fill='black'/></svg>"),
      url("data:image/svg+xml;utf8,<svg viewBox='0 0 20 20' preserveAspectRatio='none' xmlns='http://www.w3.org/2000/svg'><circle cx='10' cy='10' r='10' fill='black'/></svg>"),
      url("data:image/svg+xml;utf8,<svg viewBox='0 0 20 20' preserveAspectRatio='none' xmlns='http://www.w3.org/2000/svg'><path d='M 0 0 H 20 V 20 H 0 Z' fill='black'/></svg>"),
      linear-gradient(
        to bottom,
        #000 0%,
        #000 calc(100% - calc({{ content_boundary_size }}px * var(--content-boundary-scale))),
        transparent calc({{ content_boundary_size }}px * var(--content-boundary-scale)),
        transparent 100%);
    mask-position: left bottom, right bottom, center bottom, top;
    mask-size:
      calc({{ content_boundary_size }}px * var(--content-boundary-scale) * 2) calc({{ content_boundary_size }}px * var(--content-boundary-scale) * 2),
      calc({{ content_boundary_size }}px * var(--content-boundary-scale) * 2) calc({{ content_boundary_size }}px * var(--content-boundary-scale) * 2),
      calc(100% - {{ content_boundary_size }}px * var(--content-boundary-scale) * 2) calc({{ content_boundary_size }}px * var(--content-boundary-scale) * 3),
      auto;
    mask-repeat: no-repeat;
  }

{%- endif -%}

{%- if content_boundary_style_overlap -%}
  :root {
    --content-boundary-size-original: {{ content_boundary_style_overlap }}px;
    --content-boundary-size-padding-multiplier: {{ content_boundary_size_padding_multiplier }};
    --content-boundary-size-padding-multiplier-flipped: {{ content_boundary_size_padding_multiplier_flipped | default: content_boundary_size_padding_multiplier }};
  }
{%- endif -%}
