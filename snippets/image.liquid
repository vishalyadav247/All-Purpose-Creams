{%- comment %}theme-check-disable ImgLazyLoading{% endcomment -%}

{%- comment -%}
  Parameters:
  - image {Object} - Image object.
  - widths {String} - Comma separated list of image widths for the 'srcset' attribute (optional).
  - mobile_image {Object} - Secondary Image object, for mobiles (optional).
  - mobile_widths {String} - Comma separated list of image widths for a mobile specific source tag (optional).
  - src_width {Number} - Width for the 'src' attribute.
  - srcset_2x {Boolean} - Srcset should only be a 2x version of the src_width (optional, default is false).
  - sizes {String} - Content for the 'sizes' attribute (optional).
  - class {String} - Class name(s) for the 'class' attribute (optional).
  - attributes {String} - Additional attributes (optional).
  - alt_text {String} - Custom text for the 'alt' attribute (optional).
  - loading {String} - Custom value for the 'loading' attribute (optional, default is lazy)
  - fetchpriority {String} - low/high/auto (optional, default is auto)
  - quality {Number} - The relative quality of the of the image to load as a decimal (optional, defaults to 0.75).
                      The higher the number, the sharper (but larger) the image will be.

  Usage:
  {% render 'image',
    image: image,
    widths: '480, 640, 960, 1280',
    src_width: 1280,
    sizes: sizes,
    class: 'img-fit'
  %}
{%- endcomment -%}

{%- liquid
  if srcset_2x
    assign image_width = src_width
    assign src_width_2x = src_width | times: 2

    if image.width >= src_width_2x
      capture srcset
        echo image | image_url: width: src_width | append: ', '
        echo image | image_url: width: src_width_2x | append: ' 2x'
      endcapture

      assign src_width = src_width_2x
      assign image_width = src_width_2x
    endif
  elsif widths
    assign input_srcset = widths | remove: ' ' | split: ','

    for size in input_srcset
      assign size_int = size | times: 1

      if forloop.first and image.width < size_int
        assign output_srcset = image.width
        break
      endif

      if image.width >= size_int
        unless forloop.first
          assign output_srcset = output_srcset | append: ','
        endunless

        assign output_srcset = output_srcset | append: size
      else
        break
      endif
    endfor

    assign output_srcset = output_srcset | split: ','

    if quality
      assign quality = quality | times: settings.image_quality
    else
      assign quality = settings.image_quality
    endif

    for size in output_srcset
      capture srcset
        echo srcset
        unless forloop.first
          echo ', '
        endunless
        assign output_image_width = size | times: quality
        echo image | image_url: width: output_image_width | append: ' ' | append: size | append: 'w'
      endcapture

      if forloop.last
        assign image_width = output_image_width
      endif
    endfor

    if mobile_widths
      assign mobile_image = mobile_image | default: image
      assign mobile_input_srcset = mobile_widths | remove: ' ' | split: ','

      for size in mobile_input_srcset
        assign size_int = size | times: 1

        if forloop.first and mobile_image.width < size_int
          assign mobile_output_srcset = mobile_image.width
          break
        endif

        if mobile_image.width >= size_int
          unless forloop.first
            assign mobile_output_srcset = mobile_output_srcset | append: ','
          endunless

          assign mobile_output_srcset = mobile_output_srcset | append: size
        else
          break
        endif
      endfor

      assign mobile_output_srcset = mobile_output_srcset | split: ','

      for size in mobile_output_srcset
        capture mobile_srcset
          echo mobile_srcset
          unless forloop.first
            echo ', '
          endunless
          echo mobile_image | image_url: width: size | append: ' ' | append: size | append: 'w'
        endcapture

        if forloop.last
          assign mobile_image_width = size
        endif
      endfor
    endif
  endif

  assign image_height = image_width | divided_by: image.aspect_ratio | round

  unless loading
    if section.location == 'header'
      assign loading = 'eager'
    endif
    if section.location == 'template' and section.index < 3
      assign loading = 'eager'
    endif
  endunless
-%}

{%- if image and src_width -%}
  {%- if mobile_srcset -%}
    <picture>
      <source srcset="{{ mobile_srcset }}"
              media="(max-width: 480px)"
              width="{{ mobile_image_width }}"
              height="{{ mobile_image_width | divided_by: image.aspect_ratio | round }}">
  {%- endif -%}

      <img {% if srcset %}srcset="{{ srcset }}" {% endif -%}
           {% if sizes and srcset %}sizes="{{ sizes }}" {% endif -%}
           src="{{ image | image_url: width: src_width }}"
           {% if class %}class="{{ class }}" {% endif -%}
           {% if attributes %}{{ attributes }} {% endif -%}
           loading="{{ loading | default: 'lazy' }}"
           fetchpriority="{{ fetchpriority | default: 'auto' }}"
           width="{{ image_width }}"
           height="{{ image_height }}"
           alt="{{ alt_text | default: image.alt | escape }}"
           {%- if image.presentation %}{% if image.presentation.focal_point.x != 50 or image.presentation.focal_point.y != 50 %} style="object-position: {{ image.presentation.focal_point }}"{% endif %}{% endif %}>

  {%- if mobile_srcset -%}
    </picture>
  {%- endif -%}
{%- endif -%}
